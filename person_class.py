from datetime import datetime, date

# Person (–¥–≤–∞ —Å–≤–æ–π—Å—Ç–≤–∞: 1. —Ç–µ–ø–µ—Ä—å full_name –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ–º, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–µ–π (–æ–¥–Ω–æ –ø–æ–ª–µ, –º—ã –æ–∂–∏–¥–∞–µ–º - —Ç–∏–ø —Å—Ç—Ä–æ–∫–∞
# –∏ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ ¬´–∏–º—è —Ñ–∞–º–∏–ª–∏—è¬ª), –∞ —Å–≤–æ–π—Å—Ç–≤ name –∏ surname –Ω–µ—Ç—É, 2. –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è).
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ:
# –≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è –∏–∑ full_name
# –≤—ã–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∏–∑ full_name;
# –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –±—ã–ª–æ/–µ—Å—Ç—å/–∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –≥–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (obj.age_in(year));
# –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤ —ç—Ç–æ–º –≥–æ–¥—É;
# ** (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ full_name –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–∞,
#    —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ üòä
# ** (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –º–µ–Ω—å—à–µ 2019,
#    –Ω–æ –±–æ–ª—å—à–µ 1900, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ


class Person:
    def __init__(self, full_name='', birth_date=date(1900, 1, 1)):
        """full_name= str must be two words name and surname like 'Ivan Durak', raise ValueError if not\n
           birth_date= datetime.datetime.date obj , year must be in range 1900<year<current_year,
           raise ValueError if not"""

        if len(full_name.split()) == 2:
            self._full_name = full_name
        else:
            raise ValueError(f'full_name="{full_name}" must be two words name and surname like "Ivan Durak"')
        if 1900 < birth_date.year < datetime.now().year:
            self._birth_date = birth_date
        else:
            raise ValueError(f'birth_date.year="{birth_date.year}" year must be in range 1900<year<current_year')

    def get_name(self) -> str:
        """return Name str as part of full_name"""
        return self._full_name.split()[0]

    def get_surname(self) -> str:
        """return Surname str as part of full_name"""
        return self._full_name.split()[1]

    def age_in(self, year=datetime.now().year) -> int:
        """return age of person based on birth_date and year\n
        year default is current year"""
        return year - self._birth_date.year

    def __str__(self):
        return f'{self._full_name}, {self._birth_date.strftime("%d.%m.%Y")}'


if __name__ == '__main__':
    per = Person('Ivan Durak', date(1985, 10, 27))
    print(per)
    print(per.get_surname())
    print(per.get_name())
    print(per.age_in(2019))

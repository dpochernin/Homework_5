from datetime import datetime, date
from person_class import Person

# Employee (–Ω–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç Person) (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞: –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞)
# ** (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö) –ú–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ üòä
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã:
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã: Junior ‚Äî –º–µ–Ω–µ–µ 3 –ª–µ—Ç, Middle ‚Äî –æ—Ç 3 –¥–æ 6 –ª–µ—Ç,
# Senior ‚Äî –±–æ–ª—å—à–µ 6 –ª–µ—Ç.
# –¢.–µ. –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å –ø—Ä–∏—Å—Ç–∞–≤–∫–æ–π Junior/Middle/Senior <position>.
# –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä —É –≤–∞—Å –æ–±—ä–µ–∫—Ç –∏–º–µ–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å ‚Äúprogrammer‚Äù —Å –æ–ø—ã—Ç–æ–º 2 –≥–æ–¥–∞, –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å ‚ÄúJunior programmer‚Äù
# –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º.


class Employee(Person):
    """full_name= str must be two words name and surname like 'Ivan Durak', raise ValueError if not\n
        birth_date= datetime.datetime.date obj , year must be in range 1900<year<current_year,
        raise ValueError if not\n
        position='' position str\n
        experience=0 years of experience int raise ValueError if <0\n
        salary=0 current salary of employee int raise ValueError if <0"""

    def __init__(self, full_name='', birth_date=date(datetime.now().year, datetime.now().month, datetime.now().day),
                 position='', experience=0, salary=0):
        super().__init__(full_name, birth_date)
        self._position = position
        if experience >= 0:
            self.experience = experience
        else:
            raise ValueError(f'experience={experience} can not be less 0')
        if salary >= 0:
            self.salary = salary
        else:
            raise ValueError(f'experience={salary} can not be less 0')

    def full_position(self) -> str:
        """return str of full position based on experience and position\n
        0..2 Junior; 3..6 Middle; 6 and more Senior"""
        status = ("Junior" if self.experience < 3 else
                  "Middle" if 3 <= self.experience < 6 else
                  "Senior")
        return f'{status} {self._position}'

    def change_salary(self, delta=0):
        """change salary of employee to delta\n
        delta=0 must be int, can be minus
        but
        delta in minus can not be more salary raise ValueError
        """
        if self.salary + delta >= 0:
            self.salary += delta
        else:
            raise ValueError(f'delta={delta} , sum of salary={self.salary} and delta can\'t be less 0')

    def __str__(self):
        return f'{super().__str__()}, {self._position}, {self.experience}, {self.salary}'


if __name__ == '__main__':
    per = Employee('Ivan Durak', date(1985, 10, 27), 'programmer', 5, 2500)
    print(per)
